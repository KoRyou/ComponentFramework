if(isModule){
    apply plugin: 'com.android.application'
}else{
    apply plugin: 'com.android.library'
}
    def cfg = rootProject.ext.defaultConfig
    def sdk = rootProject.ext.android
    def appId = rootProject.ext.applicationID

    android {
        compileSdkVersion sdk.compileSdkVersion
        defaultConfig {
            if(isModule){
                applicationId appId.model_hotel
            }
            minSdkVersion cfg.minSdkVersion
            targetSdkVersion cfg.targetSdkVersion
            versionCode cfg.versionCode
            versionName cfg.versionName
            testInstrumentationRunner cfg.testInstrumentationRunner

        /*ARouter路由  注释相关*/
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }
    }
        /* 组件化配置【清单文件】【资源】 */
        sourceSets{
            main{
                if(isModule){
                    manifest.srcFile "src/main/unit/AndroidManifest.xml"
                    java.srcDirs "src/main/java","src/main/unit/java"
                }else{
                    manifest.srcFile "src/main/AndroidManifest.xml"
                    //集成开发模式下排除unit文件夹中的所有Java文件
                    java{
                        exclude "unit/**"
                    }
                }
            }
        }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation rootProject.ext.appcompatv7
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    annotationProcessor 'com.alibaba:arouter-compiler:1.2.2'
    api project(':lib_common')
}
